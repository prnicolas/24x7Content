// Copyright (c) 2010-2011 Patrick Nicolas
package com.c24x7.clients.rss;

import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;

import javax.xml.stream.XMLEventFactory;
import javax.xml.stream.XMLEventWriter;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.StartDocument;
import javax.xml.stream.events.XMLEvent;


		/**
		 * <p>Class that allow the creation of a RSS feed.</p>
		 * @author Patrick Nicolas
		 * @date 11/21/2010
		 */
public final class CRSSGenerator {
	public static final String CHANNEL 		= "channel";
	public static final String RSS_LABEL 	= "rss";
	public static final String RSS_VERSION 	= "version";
	public static final String RSS_VE 		= "2.0";
	
	protected String 	_outputFile = null;
	protected CRSSFeed _rssfeed	= null;

	
			/**
			 * <p>Constructor for the Feed generator</p>
			 * @param rssfeed rssFeed object
			 * @param outputFile output file generated by the RSS generator
			 */
	public CRSSGenerator(final CRSSFeed rssfeed, 
						final String outputFile) {
		_rssfeed = rssfeed;
		_outputFile = outputFile;
	}

	
	
			/**
			 * <p>Default constructor with predefined format for time stamp</p>
			 * @param title title of the feed
			 * @param description description of the feed
			 * @param link link of the feed
			 * @param language language of the feed
			 * @param copyright copyright of the feed.
			 */
	public CRSSGenerator(final String title, 
						final String description, 
						final String link, 
						final String language,
						final String copyright,
						final String outputFile) {
		
		Calendar cal = new GregorianCalendar();
		Date creationDate = cal.getTime();
		SimpleDateFormat date_format = new SimpleDateFormat(
				"EEE', 'dd' 'MMM' 'yyyy' 'HH:mm:ss' 'Z", Locale.US);
		
		_rssfeed = new CRSSFeed(title, 
								description, 
								link, 
								language, 
								copyright, 
								date_format.format(creationDate));
		_outputFile = outputFile;
	}
	
	
	public void addMessage(CRSSMessage msg) {
		_rssfeed.getMessages().add(msg);
	}
	
	
	
			/**
			 * <p>Create a RSS XML feed stream from a RSSFeed object</p>
			 * @throws XMLStreamException if stream is incorrectly formatted
			 * @throws FileNotFoundException if output stream file is not found.
			 */
	public void create() throws XMLStreamException, FileNotFoundException {

			/*
			 * Create a XMLOutputFactory instance and an event writer
			 */
		XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();
		XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(new FileOutputStream(_outputFile));

			/*
			 * Create the starting and ending 
			 */
		XMLEventFactory eventFactory = XMLEventFactory.newInstance();
		StartDocument startDocument = eventFactory.createStartDocument();
		XMLEvent end = eventFactory.createDTD("\n");

			/*
			 * Create and write XML start Tag
			 */
		eventWriter.add(startDocument);

		// Create open tag
		eventWriter.add(end);
		eventWriter.add(eventFactory.createStartElement("", "", RSS_LABEL));
		eventWriter.add(eventFactory.createAttribute(RSS_VERSION, RSS_VE));
		eventWriter.add(end);

		eventWriter.add(eventFactory.createStartElement("", "",CHANNEL));
		eventWriter.add(end);

			/*
			 * Create the different nodes for the feed container
			 */
		createNode(eventWriter, CRSSItem.TITLE, _rssfeed.getTitle());
		createNode(eventWriter, CRSSFeed.LINK, _rssfeed.getLink());
		createNode(eventWriter, CRSSItem.DESCRIPTION, _rssfeed.getDescription());
		createNode(eventWriter, CRSSFeed.LANGUAGE, _rssfeed.getLanguage());
		createNode(eventWriter, CRSSFeed.COPYRIGHT, _rssfeed.getCopyright());
		createNode(eventWriter, CRSSFeed.PUB_DATE, _rssfeed.getPubDate());

				/*
				 * Create the messages
				 */
		for (CRSSMessage entry: _rssfeed.getMessages()) {
			eventWriter.add(eventFactory.createStartElement("", "", CRSSParser.ITEM));
			eventWriter.add(end);
			createNode(eventWriter, CRSSItem.TITLE, entry.getTitle());
			createNode(eventWriter, CRSSItem.DESCRIPTION, entry.getDescription());
			createNode(eventWriter, CRSSMessage.AUTHOR, entry.getAuthor());
			createNode(eventWriter, CRSSMessage.ORIG_LINK, entry.getOrigLink());
			createNode(eventWriter, CRSSMessage.GUID, entry.getGuid());
			eventWriter.add(end);
			eventWriter.add(eventFactory.createEndElement("", "", CRSSParser.ITEM));
			eventWriter.add(end);

		}

		eventWriter.add(end);
		eventWriter.add(eventFactory.createEndElement("", "", CHANNEL));
		eventWriter.add(end);
		eventWriter.add(eventFactory.createEndElement("", "", RSS_LABEL));
		eventWriter.add(end);
		eventWriter.add(eventFactory.createEndDocument());

		eventWriter.close();
	}

	
	
	protected void createNode(final XMLEventWriter eventWriter, 
						    final String name,
						    final String value) throws XMLStreamException {
		
			/*
			 * Create the XML event estimatory
			 */
		XMLEventFactory eventFactory = XMLEventFactory.newInstance();
		XMLEvent end = eventFactory.createDTD("\n");
		XMLEvent tab = eventFactory.createDTD("\t");
		
			/*
			 * Create starting elements
			 */
		eventWriter.add(tab);
		eventWriter.add(eventFactory.createStartElement("", "", name));
		
			/*
			 * Create messages as Character strings
			 */
		eventWriter.add(eventFactory.createCharacters(value));
		
			/*
			 * Create the last element of the RSS stream
			 */
		eventWriter.add(eventFactory.createEndElement("", "", name));
		eventWriter.add(end);
	}

}

// ----------------------------  EOF --------------------------------