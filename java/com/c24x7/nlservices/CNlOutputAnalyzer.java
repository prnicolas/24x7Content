// Copyright (C) 2010 Patrick Nicolas
package com.c24x7.nlservices;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import com.c24x7.nlservices.content.CStructuredOutput;
import com.c24x7.nlservices.content.CRawOutput;
import com.c24x7.nlservices.content.AContent;
import com.c24x7.nlservices.textanalyzer.CTextAnalyzer;
import com.c24x7.nlservices.textanalyzer.ITextAnalyzer;
import com.c24x7.util.logs.CLogger;

		/**
		 * <p>Class to break down generated raw content and extract the actual title
		 * summary, tags, message and links.</p>
		 * @see InlProcessor
		 * @author Patrick Nicolas
		 * @date 11/22/2010
		 */
public final class CNlOutputAnalyzer implements INlProcessor {
			/**
			 * <p>Maximum number of characters used in the title of the generated content</p>
			 */
	public final static int MAX_CHARS_IN_TITLE = 140;
	
			/**
			 * <p>Execute the Output analysis process from an input content (Raw generated content)</p>
			 * @param content raw content generated by NLG engine
			 * @return Structured content (title, message, body...)
			 * @throws IOException if content could not be correctly loaded.
			 */
	@Override
	public AContent process(AContent content) throws IOException {
		if( content == null ) {
			throw new IllegalArgumentException("Output analyzer input is null");
		}
		
		AContent output = null;
		CRawOutput rawOutput = (CRawOutput)content;
		List<String> structuredContent = rawOutput.getContent();
				/*
				 * Make sure we found at least one sentence generated.
				 */
		if( structuredContent.size() > 0) {
				
			float aveSimilarity = 0.0F;
			ITextAnalyzer analyzer = new CTextAnalyzer();
			String titleCandidate = null;
			
			Map<String, Integer> signWords = analyzer.getSignificantWords(content.getSeed());
			CLogger.info("\n------  Seed ----------------\n" + content.getSeed() + "\n");
			
			if(signWords != null) {
				Map<String, Integer> signWordsGenerated = null;
			
				CLogger.info("-------------- Generated Output --------------");
				float maxSimilarity = -1.0F, similarity = 0.0F;
			
				StringBuilder buf = new StringBuilder();
				
				for(String sentence : structuredContent) {
					buf.append(sentence);
					signWordsGenerated = analyzer.getSignificantWords(sentence);
				
							/*
							 * If the map of most significant words have been extracted, then
							 * compute the similarity of the generated output with the seed
							 */
					if(signWordsGenerated != null) {
						int score = 0;
						for(String key : signWords.keySet()) {
							if( signWordsGenerated.containsKey(key) ) {
								score += signWords.get(key).intValue();
							}
						}
						similarity = (float)score*100.0F/signWords.size();
						
							/*
							 * Keep track of the sentence that has the most similarity with the
							 * original seed.
							 */
						if( similarity > maxSimilarity && sentence.length() < MAX_CHARS_IN_TITLE) {
							maxSimilarity = similarity;
							titleCandidate = sentence;
						}
						
						CLogger.info(sentence + "\nSimilarity: " + similarity + "%\n");
						aveSimilarity += similarity;
					}
				}
			
				if( titleCandidate == null) {
					String seedStr = content.getSeed();
					if (seedStr.length() > 128) {
						seedStr = seedStr.substring(0, 128);
					}
					titleCandidate = seedStr;
				}
				output = new CStructuredOutput(	content.getSeed(), 
												titleCandidate, 
												buf.toString(), 
												aveSimilarity/structuredContent.size());
			}
		}
		
		return output;
	}
}
// ---------------------------  EOF ----------------------------