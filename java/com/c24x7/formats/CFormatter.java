// Copyright (C) 2010-11 Patrick Nicolas
package com.c24x7.formats;

import java.util.Map;
import java.util.HashMap;
import java.io.IOException;

import com.c24x7.util.logs.CLogger;
import com.c24x7.util.CEnv;
import com.c24x7.util.CFileUtil;




		/**
		 * <p>Generic filter implementation of formatting rules for Twitter, Facebook, 
		 * Web, Blogs, email related content. The filtering and formatting is
		 * implemented in nested classes</p> 
		 * @author Patrick Nicolas
		 * @date 11/20/2010
		 * @see com.c24x7.nlservices.INlProcessor 
		 */
public final class CFormatter  {
	public static final String EMAIL_LBL 	= "email";
	public static final String WEB_LBL 		= "web";
	public static final String TWITTER_LBL 	= "twitter";
	public static final String RSS_LBL 		= "rss";
	public static final String FACEBOOK_LBL = "facebook";
		
	protected static Map<String, AFormatProxy> channel = null;
	static {
		channel = new HashMap<String, AFormatProxy>();
		channel.put(EMAIL_LBL, new CMailFormat());
		channel.put(WEB_LBL,new CWebFormat());
		channel.put(RSS_LBL, new CRSSFormat());
		channel.put(TWITTER_LBL, new CTwitterFormat());
		channel.put(FACEBOOK_LBL, new CFacebookFormat());
	}
	
	protected Map<String, AFormatProxy> _formatMap = null;
	
			/**
			 * <p>Generic abstract formatted generated content.</p>
			 * @author Patrick Nicolas
			 */
	public static abstract class AFormatProxy {
		protected static String old     = "x";
		protected static String link	= null;
		protected String	_head 	= null;
		protected String	_msg  	= null;
		protected String	_link	= null;
		protected String	_error	= null;
	
		
		public void format(CExtractor extractor) throws IOException  {
			_error = null;
			
		
			String newMsg = extractor.getTitle().trim();
			if(old.compareTo(newMsg) == 0) {
				_error = "Message already sent!";
			}
			else {
				_link = link;
				extractMessage(extractor);
				createMsg(extractor);
			}
		}
		
		
		protected void extractMessage(CExtractor extractor) { }
		abstract protected void createMsg(CExtractor extractor) throws IOException ;
		abstract public String results();
		abstract public AFormatProxy create();
				
		protected void debug(final String outputString, final String debugPath) {
			if(debugFile != null) {
				try {
					write( CEnv.outputDir + debugPath + debugFile,  outputString);
				}
				catch( IOException e) {
					CLogger.error("Cannot access debug file: " + debugPath + debugFile + " " + e.toString());
				}
			}
		}
		
	
		protected static void write(final String fileName, 
									final String content) throws IOException {
			CFileUtil.write(fileName, content);
		}
	}
		
	protected static String debugFile = null;
	
	
	
	/**
	 * <p>Create a NLG output filter and formatter object</p>
	 * @param env environment for this user.
	 */	
	public CFormatter() {		
		_formatMap = new HashMap<String, AFormatProxy>();
	}
	

	public void addFormat(final String formatKey) {
		AFormatProxy thisType = channel.get(formatKey);
		if( thisType != null ) {
			_formatMap.put(formatKey, thisType.create());
		}
	}


			/**
			 * <p>Define the debugging mode for this formatter object.</p>
			 * @param debugFileName name of the debugging log, null to switch debugging OFF
			 */
	public static void setDebugFile(String debugFileName) {
		debugFile = debugFileName;
	}
	
	
	/**
	 * <p>Format the current structured content generated by the NLG engine into a set of
	 * format covering social messages, email, blogs and web sites.</p>
	 * @param content structured generated output.
	 * @return original content
	 * @throws IllegalArgumentException if content is undefined.
	 */

	/*
	public String process(CNlExtractor extractor,
			              CGenOutput genOutput, 
						  final String user)  throws IOException {
		
		if( genOutput == null || user == null ) {
			throw new IllegalArgumentException("Null formatting argument");
		}
		String socialTag = null;
				
		if( AFormatProxy.createLink(genOutput, extractor, user) != null ) {
			
			AFormatProxy type = null;
			for( String selection : _formatMap.keySet() )	{
				type = _formatMap.get(selection);
				if(type != null) {
					type.format(extractor);
				}
			}
				
			StringBuilder buf = new StringBuilder();
		
			String result = null;
			for( String selection : _formatMap.keySet() )	{
				type = _formatMap.get(selection);
				if(type != null) {
					result = type.results();
					buf.append(result);
				}
			}	
			socialTag = buf.toString();
		}
			
		else {
			socialTag = CXMLConverter.put(CXMLConverter.ERROR_TAG, "Could not create web page");
		}
		
		return CXMLConverter.put(CXMLConverter.SOCIAL_TAG, socialTag);
	}	
	*/
} 

// -------------------  EOF ------------------------------------