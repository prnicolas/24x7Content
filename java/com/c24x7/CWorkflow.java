// Copyright (C) 2010 Patrick Nicolas
package com.c24x7;

import java.io.IOException;

import com.c24x7.nlservices.content.AContent;
import com.c24x7.nlservices.INlProcessor;
import com.c24x7.nlservices.CNlGenerator;
import com.c24x7.nlservices.CNlOutputAnalyzer;
import com.c24x7.nlservices.CNlOutputFormatter;
import com.c24x7.util.logs.CLogger;
import com.c24x7.util.CEnv;

		/**
		 * <p>Workflow manager for the NL services used in generating and analysis content for 
		 * multiple destinations such as social networks, blogs/RSS, emails or web sites. This workflow
		 * manager has a rudimentary debugging mechanism that consists of duplicating all content generated
		 * into a files (and possibly a database at a later stage). This current version allows the client code
		 * to collect statistics, dumped in log files and recursively invokes the NLG engine by using
		 * the output of the NLG engine as seed for the subsequent request.</p>
		 * @author Patrick Nicolas
		 * @date 11/23/2010
		 */
public final class CWorkflow  {
	
	public final static String NO_STATS = "Statistics not initialized";

	
		/**
		 * <p>Define the type of execution for this workflow.<ul>
		 * <li><b>TEST</b> for testing purpose, with output in files</li>
		 * <li><b>STAGING</b> for sand boxed output streams</li>
		 * <li><b>PRODUCTION</b> for deployment</li>
		 * </ul>
		 * @author Patrick Nicolas
		 * @date 11/22/2010
		 */
	public enum EXECUTION_MODE {
		TEST, STAGING, PRODUCTION 
	}

			/**
			 * <p>Nested static class that encapsulate the statistics for the generation, analysis
			 * and broadcasting of social messages. The list of statistics collected includes number
			 * of sentences, characters per seed, duration and statistical similarity.</p>
			 * @author Patrick Nicolas
			 */
	public class NStats {
		private int 	_numChars 		= 0;
		private long 	_duration 		= 0L;
		private int		_numSeeds 		= 0;
		private int		_numSentences 	= 0;
		private int 	_numCharsTitle 	= 0;
		private float	_similarity 	= 0.0F;
		private String  _title 			= null;
		
			/**
			 * <p>Create a statistics object</p>
			 */
		public NStats() {
			_duration = System.currentTimeMillis();
		}
		
		/**
		 * <p>Update the number of characters generated by the NLG engine with the current seed.</p>
		 * @param numChars number of characters generated by the NLG engine for the current seed
		 */
		public void setNumChars(int numChars) {
			_numChars = numChars;
		}
		
			/**
			 * <p>Update the number of sentences for this statistics object.</p>
			 * @param numSentences number of sentences generated by the NLG engine for the current seed
			 */
		public void setNumSentences(int numSentences) {
			_numSentences = numSentences;
		}
		
		/**
		 * <p>Update the number of seeds generated by the NLG engine during this test.</p>
		 * @param numSeed number of seeds
		 */
		public void setNumSeeds(int numSeeds) {
			_numSeeds = numSeeds;
		}
		
		/**
		 * <p>Record the title for the generated content.</p>
		 * @param title title extracted for this generated content
		 */
		public void setTitle(final String title) {
			_title = title;
		}
		
		/**
		 * <p>Record the title for the generated content.</p>
		 * @param title title extracted for this generated content
		 */
		public void setNumCharsTitle(int numCharsTitle) {
			_numCharsTitle = numCharsTitle;
		}
		
			/**
			 * <p>Record the statistical similarity computed for the generated output.</p>
			 * @param similarityn statistical similarity
			 */
		public void setSimilarity(float similarity) {
			_similarity = similarity;
		}
		
			/**
			 * <p>Generated a textual representation of the Statistical object.</p>
			 * return textual representation
			 */
		@Override
		public String toString() {
			_duration = System.currentTimeMillis() - _duration;
			
			StringBuilder buf = new StringBuilder("\nStatistics on generated content");
			buf.append("\nSize= ");
			buf.append((float)_numSentences/_numSeeds);
			buf.append(" sentences\nSize= ");
			buf.append((float)_numChars/_numSeeds);
			buf.append(" characters\nSimilarity= ");
			buf.append(_similarity);
			buf.append("%\nTitle= ");
			buf.append(_title);
			buf.append("\nTitle size= ");
			buf.append(_numCharsTitle);
			buf.append(" characters\nAverage duration per generation= ");
			buf.append((float)_duration*0.001 /_numSeeds);
			buf.append(" seconds");
			
			return buf.toString();
		}
	}
	
	private INlProcessor _nlGenerator 		= null;
	private INlProcessor _nlOutputAnalyzer 	= null;
	private INlProcessor _nlOutputFormatter = null;
	private NStats		 _stats				= null;
	private String		 _seedStr			= null;
	
			/**
			 * <p>Constructor for the Workflow manager without seed which instantiates the different Natural
			 * language processing units. Those units exchange AContent objects through invocation of
			 * INlProcessor.content</p>
			 */
	
	public CWorkflow(CEnv env) {
		this(env, null);
	}
	
	/**
	 * <p>Constructor for the Workflow manager with initial seed. The constructor instantiates the different Natural
	 * language processing units. Those units exchange AContent objects through invocation of
	 * INlProcessor.content</p>
	 * @param seedStr initial seed string
	 */

	public CWorkflow(CEnv env, final String seedStr) {
		if(env == null) {
			throw new IllegalArgumentException("Null argument for worflow");
		}
		_nlGenerator = new CNlGenerator();
		_nlOutputAnalyzer = new CNlOutputAnalyzer();
		_nlOutputFormatter = new CNlOutputFormatter(env);
		_seedStr = seedStr;
	}

	
			/**
			 * <p>Initialize the seed for this execution of the seed.</p>
			 * @param seedStr original seed string
			 */
	public void setSeed(final String seedStr) {
		if(seedStr == null) {
			throw new IllegalArgumentException("Content seed is undefined");
		}
		_seedStr = seedStr;
	}
	
			/**
			 * <p>Initialize the statistics object to collect and compute
			 * statistics on the quality of content generated by NLG engine.</p>
			 */
	public void setStats() {
		_stats = new NStats();
	}
	
		/**
		 * <p>Set up the debugging flag and file that dump a copy of the generation of messages and content
		 * into a file system. If the argument is null, no log will be generated.</p>
		 * @param debugFile log file to capture the copy of a messages sent (for debugging purpose)
		 */
	public void setDebugFile(final String debugFile) {
		CNlOutputFormatter.setDebugFile(debugFile);
	}
	

	
	
	
	/**
	 * <p>Main execution of the workflow of the Natural Language Processing units, that pre-processes
	 * the seed, invokes the NLG engine, collect statistics, format and pushed the resulting
	 * content to diverse social networks, blogs, RSS destination and web sites</p>
	 * @param numIterations number of iterations of consecutive invocation of the NLG engine
	 * @throws IOException if files or feeds cannot be generated.
	 * @throws IllegalArgumentException if the seed is missing or irrelevant
	 */
	public AContent execute(int numIterations) throws IOException {
		if(numIterations > 2 ) {
			throw new IllegalArgumentException("Number of iterations " + numIterations + " is too large");
		}
		
		int numIters = 0;
		String currentSeed = _seedStr;
		AContent output = null;
		
		while(numIters++ < numIterations) { 
			try  {
				output = new AContent(currentSeed);
				output.getStats(_stats);
				output = _nlGenerator.process(output);
				output.getStats(_stats);
				output = _nlOutputAnalyzer.process(output);
				output.getStats(_stats);
				output = _nlOutputFormatter.process(output);
				currentSeed = output.getSeed();
				CLogger.info(toString());
			}
			catch( IllegalArgumentException e) {
				CLogger.error("Could not generate content for:\n" + currentSeed + " " + e.toString());
			}
			catch( NullPointerException e) {
				CLogger.error("Could not generate content for:\n" + currentSeed + " " + e.toString());
			}
		}
		
		return output;
	}
	
	
	/**
	 * <p>Generated a textual representation of the Statistical object.</p>
	 * return textual representation
	 */
	@Override
	public String toString() {
		return (_stats != null) ? _stats.toString() : NO_STATS;
	}
	
}

// ----------------  EOF -----------------------------------------